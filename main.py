import telebot
from telebot import types
from config import TOKEN
from questions import QUESTIONS
from storage import save_to_leaderboard, format_leaderboard, is_username_taken
import random
import time
import threading
from storage import pluralize_ball

bot = telebot.TeleBot(TOKEN)
user_sessions = {}

ANSWER_TIME_LIMIT = 30
TIMER_STEPS = [20, 10, 5]
CATEGORIES = ["–ò—Å—Ç–æ—Ä–∏—è", "–ö–∏–Ω–æ –∏ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ", "–ú–∏—Ñ–æ–ª–æ–≥–∏—è –∏ —Ä–µ–ª–∏–≥–∏—è", "–ù–∞—É–∫–∞", "–ü—Ä–∏–∑–æ–≤–∞—è"]


def start_game(chat_id, category):
    markup = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, f"–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —É–∫–∞–∂–∏ —Å–≤–æ—ë –∏–º—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:", reply_markup=markup)
    user_sessions[chat_id] = user_sessions.get(chat_id, {})
    user_sessions[chat_id].update({"awaiting_name": True, "category": category})


def send_start_button(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–°—Ç–∞—Ä—Ç"))
    bot.send_message(chat_id, "–ù–∞–∂–º–∏ –°—Ç–∞—Ä—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!", reply_markup=markup)


def send_main_menu(chat_id):
    reset_session_flags(chat_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = CATEGORIES + ["–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", "–í—ã—Ö–æ–¥"]
    markup.add(*[types.KeyboardButton(b) for b in buttons])
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–≥—Ä—ã –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(commands=['start'])
def handle_start(message):
    send_start_button(message.chat.id)


@bot.message_handler(func=lambda message: True)
def universal_handler(message):
    chat_id = message.chat.id
    text = message.text.strip()
    lower_text = text.lower()

    # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if chat_id not in user_sessions:
        user_sessions[chat_id] = {}
        send_main_menu(chat_id)
        return

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
    if user_sessions[chat_id].get("awaiting_name"):
        if lower_text == "–≤—ã—Ö–æ–¥":
            bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ ‚Äî –Ω–∞–ø–∏—à–∏ /start.")
            send_start_button(chat_id)
            del user_sessions[chat_id]
            return
        register_user(chat_id, text)
        return

    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–∑–∞
    if lower_text in ["üéÅ –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑", "–≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑"]:
        bot.send_message(chat_id, "üèÜ –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ ‚Äî —ç—Ç–æ —Å—é—Ä–ø—Ä–∏–∑! –£–¥–∞—á–∏!")
        return
    elif lower_text == "üöÄ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        send_question(chat_id)
        return

    # –ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if "questions" in user_sessions[chat_id]:
        handle_game_answer(chat_id, text)
        return

    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
    if user_sessions[chat_id].get("awaiting_leaderboard_category"):
        category = text.capitalize()
        if category in CATEGORIES:
            board = format_leaderboard(category)
            bot.send_message(chat_id, f"–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –¥–ª—è {category}:\n{board}")
            del user_sessions[chat_id]
            send_main_menu(chat_id)
            return
        elif lower_text == "–Ω–∞–∑–∞–¥":
            del user_sessions[chat_id]
            send_main_menu(chat_id)
            return
        else:
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if lower_text == "—Å—Ç–∞—Ä—Ç":
        send_main_menu(chat_id)
        return
    elif lower_text == "—Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤":
        show_leaderboard(chat_id)
        return
    elif lower_text in [cat.lower() for cat in CATEGORIES]:
        start_game(chat_id, lower_text.capitalize())
        return
    elif lower_text == "–≤—ã—Ö–æ–¥":
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ ‚Äî –Ω–∞–ø–∏—à–∏ /start.")
        send_start_button(chat_id)
        user_sessions.pop(chat_id, None)
        return  # ‚¨ÖÔ∏è –¢—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∞, –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    elif lower_text == "–ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã":
        show_rules(chat_id)
        return

    # –ü–µ—Ä–µ—Ö–≤–∞—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if any(text in q["options"] for questions in QUESTIONS.values() for q in questions) or lower_text in ["50/50",
                                                                                                          "–ø–æ–º–æ—â—å –∑–∞–ª–∞",
                                                                                                          "üéÅ 50/50",
                                                                                                          "üéÅ –ø–æ–º–æ—â—å –∑–∞–ª–∞"]:
        recovery_message = (
            "‚ùó *–û–π\\! –ü–æ—Ö–æ–∂–µ, –º–µ–Ω—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª–∏ –∏–ª–∏ —è –ø–µ—Ä–µ–∂–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\\.*\n\n"
            "üîÑ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ \"–°—Ç–∞—Ä—Ç\" –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ\\.*"
        )
        bot.send_message(chat_id, recovery_message, parse_mode="MarkdownV2")
        send_start_button(chat_id)
        return

    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    bot.send_message(chat_id, "–Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")


def register_user(chat_id, username):
    category = user_sessions[chat_id]["category"]
    if is_username_taken(category, username):
        bot.send_message(chat_id, "–≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ.")
        return
    category_questions = QUESTIONS[category]
    user_sessions[chat_id].update({
        "username": username,
        "score": 0,
        "questions": random.sample(category_questions, len(category_questions)),
        "current_index": 0,
        "awaiting_name": False,
        "hints": {"50/50": True, "–ø–æ–º–æ—â—å –∑–∞–ª–∞": True},
        "streak": 0,
        "track_bonus_5050": False
    })
    if category == "–ü—Ä–∏–∑–æ–≤–∞—è":
        show_prize_button(chat_id)
    else:
        send_question(chat_id)


def send_question(chat_id):
    session = user_sessions[chat_id]
    if session["current_index"] >= len(session["questions"]):
        finish_game(chat_id)
        return

    q = session["questions"][session["current_index"]]
    current = session["current_index"] + 1
    total = len(session["questions"])
    question_header = escape_markdown(f"–í–æ–ø—Ä–æ—Å {current} –∏–∑ {total}:\n\n")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    difficulty_notice = ""
    if q.get("double_points", False):
        difficulty_notice = escape_markdown("‚ÄºÔ∏è –≠—Ç–æ —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ 2 –±–∞–ª–ª–∞. –ü–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    options = q["options"]
    for i in range(0, len(options), 2):
        row = [types.KeyboardButton(options[i])]
        if i + 1 < len(options):
            row.append(types.KeyboardButton(options[i + 1]))
        markup.add(*row)

    markup.add(types.KeyboardButton("üö™ –í—ã–π—Ç–∏, –ø–æ—Ä–∞ –±–µ–∂–∞—Ç—å"))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ double_points –≤–æ–ø—Ä–æ—Å
    if not q.get("double_points", False):
        hint_buttons = []
        if session["hints"]["50/50"]:
            hint_buttons.append(types.KeyboardButton("üéÅ 50/50"))
        if session["hints"]["–ø–æ–º–æ—â—å –∑–∞–ª–∞"]:
            hint_buttons.append(types.KeyboardButton("üéÅ –ü–æ–º–æ—â—å –∑–∞–ª–∞"))
        if hint_buttons:
            markup.add(*hint_buttons)

    escaped_question = escape_markdown(q['question'])
    bot.send_message(
        chat_id,
        f"{question_header}{difficulty_notice}*{escaped_question}*",
        reply_markup=markup,
        parse_mode="MarkdownV2"
    )

    session["active_options"] = q["options"]
    session["answered"] = False
    start_question_timer(chat_id, session["current_index"])
    session["question_time"] = time.time()


def handle_game_answer(chat_id, user_answer):
    session = user_sessions[chat_id]

    if user_answer == "üö™ –í—ã–π—Ç–∏, –ø–æ—Ä–∞ –±–µ–∂–∞—Ç—å":
        finish_game(chat_id)
        return

    q = session["questions"][session["current_index"]]
    elapsed = time.time() - session.get("question_time", 0)

    if session.get("answered", False):
        return

    if not q.get("double_points", False):
        if user_answer in ["50/50", "üéÅ 50/50"] and session["hints"]["50/50"]:
            apply_50_50(chat_id, session)
            return
        if user_answer in ["–ø–æ–º–æ—â—å –∑–∞–ª–∞", "üéÅ –ü–æ–º–æ—â—å –∑–∞–ª–∞"] and session["hints"]["–ø–æ–º–æ—â—å –∑–∞–ª–∞"]:
            apply_audience_help(chat_id, session)
            return

    session["answered"] = True

    if elapsed > ANSWER_TIME_LIMIT:
        bot.send_message(chat_id, f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª: {q['answer']}")
        session["current_index"] += 1
        time.sleep(1)
        send_question(chat_id)
        return

    if user_answer not in session.get("active_options", []):
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        session["answered"] = False
        return

    if user_answer == q["answer"]:
        points = 2 if q.get("double_points", False) else 1
        session["score"] += points
        session["streak"] += 1
        bot.send_message(chat_id, f"‚úÖ –í–µ—Ä–Ω–æ! {q['answer']} (+{points} –±–∞–ª–ª{'–∞' if points == 1 else '–æ–≤'})")

        if session.get("track_bonus_5050") and session["streak"] == 3:
            if not session["hints"]["50/50"]:
                session["hints"]["50/50"] = True
                bot.send_message(chat_id, "üéâ –ë–æ–Ω—É—Å! –¢—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏–ª –ø–æ–¥—Å–∫–∞–∑–∫—É 50/50 –∑–∞ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥—Ä—è–¥.")
            session["streak"] = 0
    else:
        session["streak"] = 0
        bot.send_message(chat_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['answer']}")

    session["current_index"] += 1
    send_question(chat_id)


def apply_50_50(chat_id, session):
    q = session["questions"][session["current_index"]]
    correct = q["answer"]
    wrong_options = [opt for opt in q["options"] if opt != correct]
    reduced_options = [correct, random.choice(wrong_options)]
    random.shuffle(reduced_options)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for option in reduced_options:
        markup.add(types.KeyboardButton(option))
    if session["hints"]["–ø–æ–º–æ—â—å –∑–∞–ª–∞"]:
        markup.add(types.KeyboardButton("–ø–æ–º–æ—â—å –∑–∞–ª–∞"))

    session["hints"]["50/50"] = False
    session["active_options"] = reduced_options
    session["track_bonus_5050"] = True
    session["streak"] = 0

    bot.send_message(chat_id, "–û—Å—Ç–∞–ª–æ—Å—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞:", reply_markup=markup)


def apply_audience_help(chat_id, session):
    q = session["questions"][session["current_index"]]
    votes = generate_audience_votes(q["options"], q["answer"])
    vote_results = "\n".join([f"{opt}: {percent}%" for opt, percent in votes.items()])

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for option in q["options"]:
        markup.add(types.KeyboardButton(option))
    if session["hints"]["50/50"]:
        markup.add(types.KeyboardButton("50/50"))

    session["hints"]["–ø–æ–º–æ—â—å –∑–∞–ª–∞"] = False
    session["active_options"] = q["options"]

    bot.send_message(chat_id, "–ü–æ–º–æ—â—å –∑–∞–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∞ –≥–æ–ª–æ—Å–∞:\n\n" + vote_results, reply_markup=markup)


def generate_audience_votes(options, correct_answer):
    votes = {}
    remaining = 100
    shuffled_options = options.copy()
    random.shuffle(shuffled_options)

    for option in shuffled_options:
        if option == correct_answer:
            continue
        vote = random.randint(5, 25)
        votes[option] = vote
        remaining -= vote

    votes[correct_answer] = remaining
    return dict(sorted(votes.items(), key=lambda item: item[1], reverse=True))


def start_question_timer(chat_id, question_index):
    def timer_action():
        msg = bot.send_message(chat_id, f"‚è≥ {ANSWER_TIME_LIMIT} —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å...")
        message_id = msg.message_id

        for remaining in TIMER_STEPS:
            time.sleep(ANSWER_TIME_LIMIT - remaining)
            session = user_sessions.get(chat_id)
            if not session or session.get("current_index") != question_index or session.get("answered", False):
                return
            try:
                bot.edit_message_text(f"‚è≥ {remaining} —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å...", chat_id, message_id)
            except Exception:
                pass

        time.sleep(TIMER_STEPS[-1])
        session = user_sessions.get(chat_id)
        if session and session.get("current_index") == question_index and not session.get("answered", False):
            q = session["questions"][question_index]
            try:
                bot.edit_message_text("‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!", chat_id, message_id)
            except Exception:
                pass
            bot.send_message(chat_id, f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª: {q['answer']}")
            session["current_index"] += 1
            send_question(chat_id)

    threading.Thread(target=timer_action).start()


def escape_markdown(text):
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for ch in escape_chars:
        text = text.replace(ch, f'\\{ch}')
    return text


def show_rules(chat_id):
    rules_text = (
        f"üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n\n"
        f"1Ô∏è‚É£ –£ —Ç–µ–±—è –µ—Å—Ç—å {ANSWER_TIME_LIMIT} —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å ‚Äî –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.\n"
        "2Ô∏è‚É£ –î–æ—Å—Ç—É–ø–Ω—ã –¥–≤–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏:\n"
        "   üéÅ 50/50 ‚Äî —É–±–∏—Ä–∞–µ—Ç –¥–≤–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞.\n"
        "   üéÅ –ü–æ–º–æ—â—å –∑–∞–ª–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑—Ä–∏—Ç–µ–ª–µ–π.\n"
        "3Ô∏è‚É£ –ó–∞ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥—Ä—è–¥ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –±–æ–Ω—É—Å 50/50 —Å–Ω–æ–≤–∞.\n\n"
        "–ì–æ—Ç–æ–≤? –ñ–º–∏ –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!"
    )
    bot.send_message(chat_id, escape_markdown(rules_text), parse_mode="MarkdownV2")


def reset_session_flags(chat_id):
    if chat_id not in user_sessions:
        user_sessions[chat_id] = {}
    preserved = {k: v for k, v in user_sessions[chat_id].items() if k in ["username", "category"]}
    user_sessions[chat_id] = preserved


def finish_game(chat_id):
    session = user_sessions.pop(chat_id, None)
    if not session:
        send_main_menu(chat_id)
        return

    score = session['score']
    category = session['category']
    save_to_leaderboard(category, session["username"], score)

    bot.send_message(chat_id, f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢—ã –Ω–∞–±—Ä–∞–ª {score} {pluralize_ball(score)} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é
    reset_session_flags(chat_id)
    send_main_menu(chat_id)


def show_leaderboard(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = CATEGORIES + ["–ù–∞–∑–∞–¥"]
    markup.add(*[types.KeyboardButton(b) for b in buttons])
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:", reply_markup=markup)

    # –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–µ—Å—Å–∏—é, –∞ –¥–æ–ø–æ–ª–Ω—è—Ç—å
    if chat_id not in user_sessions:
        user_sessions[chat_id] = {}
    user_sessions[chat_id]["awaiting_leaderboard_category"] = True


def show_prize_button(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üéÅ –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑"))
    markup.add(types.KeyboardButton("üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
    bot.send_message(chat_id, "–¢—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –∑–∞ –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?", reply_markup=markup)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    while True:
        try:
            bot.polling(none_stop=True, interval=0, timeout=60)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            time.sleep(5)
